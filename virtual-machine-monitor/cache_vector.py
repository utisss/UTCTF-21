import numpy as np
import random
import collections

def genRand():
    s = np.random.normal(15,9,(1,64))
    return np.clip(s,0.5,33)

keys = {"p": np.array([[ 0.5       ,  1.45771822, 16.55169164, 24.96585516, 15.71495944,
        19.71016611, 15.56798746,  6.65642671,  0.5       ,  1.92553298,
        12.62727788, 11.51084202, 15.81204601,  9.85330618,  0.5       ,
        18.27284675,  6.71208214, 28.85454987, 12.91655747,  2.84072654,
        17.54421647,  9.9130287 , 15.09386884, 19.23906804, 22.01451096,
         2.66366797, 28.84181629,  2.34920677, 26.86098537,  8.81172889,
        22.77726595, 14.53080828, 23.77439639, 31.05893459,  3.6267472 ,
        25.74626986, 13.90252888, 17.26939085,  7.17271744, 26.78288801,
        11.74393453, 14.04077209,  3.729218  , 22.35114099, 16.75621545,
         4.86897145,  7.79484303,  0.5       ,  1.87893655, 32.0552648 ,
         9.75889685, 22.40642981, 16.3371959 , 14.94462322, 28.53278907,
        23.01349846, 15.34833044, 15.06306446, 12.50356644, 25.01049789,
        27.72516881, 33.        , 13.27964012, 14.47312449]]),
        "m":np.array([[21.03458285,  5.14091003, 24.41161827, 26.59110938,  4.52846487,
        16.32815213,  2.89507211,  9.37786796, 25.68245682, 21.32265989,
         8.74068385, 16.25489187, 20.60457375, 15.44384272,  6.79356825,
        10.29911016,  5.97964475,  7.12596035,  8.07619429, 19.90968411,
         7.48252052, 26.97928476, 11.03532565, 25.19842786, 10.49324651,
        17.80427765, 14.15360346, 15.40720458,  3.16351286, 19.18758307,
        11.57266826, 21.75938594,  0.5       ,  6.86194231, 30.83645312,
        22.64922202, 15.42433274, 13.71513354,  0.5       ,  2.18011976,
        15.87128805,  7.96276263, 16.4307122 , 22.80997013,  5.95859245,
         9.52726798, 31.44648752,  7.44789139, 33.        , 28.44229171,
        12.22477369, 11.53041377, 17.79913392, 13.75728997, 17.79855995,
         0.5       , 27.34044545, 18.38621697, 10.44576381, 28.01402957,
        16.94456944, 13.74995159, 22.48335893, 15.65996598]]),
        "d": np.array([[16.61858252, 15.34785326, 24.93353621,  7.39390105, 33.        ,
        19.46285742, 11.91594315,  6.94537749, 18.77483208,  5.62582217,
        26.32268218,  4.37714178, 10.77413703,  7.88371718, 10.79532831,
        23.34097004,  8.41721718,  7.83269736, 13.28852284,  0.5       ,
         0.5       , 15.98945677,  2.67592916, 12.86493327, 11.22404229,
         5.950313  , 17.05958363, 26.02455351, 17.75451953, 27.93151343,
        13.56314918, 20.37258838, 25.40696914,  1.74983474, 14.34768815,
        26.62729895,  6.46878968, 25.47031054, 18.42925665, 27.71080765,
        14.95646337,  5.80733995,  1.83762762, 19.32039565,  0.5       ,
        22.8350336 , 21.30300051, 25.67227887,  4.46726336, 13.07196115,
        22.6307508 , 23.17050954,  0.5       , 12.18532951, 10.14938869,
         8.20229492, 12.43058633,  2.56836707, 27.61322584,  9.4443526 ,
        20.48111258,  5.06150078, 11.49287362, 18.41628814]])
}



ops = ["d","m","p"]
pad = [1,1,0,1,0,0,0,1]
key = [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1]
cor = []
for i in key:
    if i == 0:
        cor += [1,2,0]
    else:
        cor += [2,0]

def writeVec(f,op,writeOp):
    noise = np.random.normal(0,3, keys[op].shape)
    noise = np.clip(noise+keys[op],0.5,33)
    for i in noise.tolist()[0][:-1]:
        f.write(str(i)+", ")
    f.write(str(noise.tolist()[0][-1]))
    if(writeOp):
        f.write(", "+ op +"\n")
    else:
        f.write("\n")

f = open("lab.csv", "w")
for i in range(500):
    writeVec(f,random.choice(ops),True)


t = open("target.csv","w")
for i in key:
    if i == 0:
        writeVec(t,"m",False)
        writeVec(t,"p",False)
        writeVec(t,"d",False)
    else:
        writeVec(t,"p",False)
        writeVec(t,"d",False)

        

f.close()
t.close()

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder


df = pd.read_csv("lab.csv",header=0)
forest_model = RandomForestRegressor()
y = LabelEncoder().fit_transform(df.iloc[:,-1:])
print(y.shape)
x = df.iloc[:,0:64]
forest_model.fit(x, y)


keyx = pd.read_csv("target.csv",header=None)\


pred = [ int(round(i)) for i in forest_model.predict(keyx)]


i = 0
sol = []
while i+1 < len(pred):
    if pred[i] == 2 and pred[i+1] == 0:
        sol += [1]
        i+= 2
    else:
        sol += [0]
        i+= 3

diff = 0
for idx,  i in enumerate(sol):
    if i - key[idx] != 0:
        diff+=1
print(sol)
print(diff)